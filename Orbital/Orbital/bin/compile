#!/usr/bin/python
# -*- coding: utf-8 -*-
#############################################################
# Copyright Omar Andr√©s Zapata Mesa 			    #
# Herramienta de compilacion para Curso de Mecanica Orbital #
# Profesores Jorge Zuluaga y Ricardo Restrepo		    #
# Universidad de Antioquia 2008				    #
# para Gnu/Linux bajo licencia Gpl 3			    #
#############################################################


import sys, os, string

#variables #recordar dejar espacios al final bug fixed
GCC="g++ "
CFLAGS=" -c -I/usr/local/Orbital/cspice/include -I/usr/local/Orbital/gsl/include -I/usr/local/Orbital/Pigsl/include -I/usr/local/Orbital/include "
LFLAGS=" /usr/local/Orbital/PIgsl/lib/libpigsl.a -lgsl -lgslcblas /usr/local/Orbital/cspice/lib/cspice.a /usr/local/Orbital/cspice/lib/csupport.a -lm "

#funcion de ayuda
#parametro mode que puede ser "basic": como se usa compile "code": falta el archivo fuente
def help(mode):
  #mode de usar basico de compile
  if mode=="basic":
    print "\n=================================================================="
    print "Ayuda de Compilacion basica"
    print "compile programa.c \ngenera la salida programa"
    print "compile -e programa.c \nsi compila bien, ejecuta la salida ./program"
    print "==================================================================="
    sys.exit(1);
  #falta el archivo a compilar
  if mode=="code":
    print "\n============================================="
    print "Falta el archivo a compilar"
    print "============================================="
    sys.exit(1)


#funcion de compilacion
#parametro code = archivo a compilar
def compile(code):
  #object ocode is file.c after is file.o and last file
  i=0
  while True:
	i=i-1
	if code[len(code[:i-1]):i]=="/": break
	if code[len(code[:i-1]):i]=="":break

  ocode=code[len(code[:i]):len(code)]
  if os.getenv("COMPILEDEBUG")=="TRUE":
	print "==========================Compiling Debug=========================="
	print "funtion compile arguments = "+code
	print "file to compile = "+ocode
	print "dir of compile call = "+os.getcwd()
	print "=======================Compiling Debug End========================="
  #sys.exit(1)
#miramos que tenga la extension .c o .cpp para pasarle el archivo al compilador
  if code[len(code)-2:len(code)]!=".c" and code[len(code)-4:len(code)]!=".cpp":
    print "Erro: No es un archivo de c/c++"
    print "no termina en .c .cpp"
    sys.exit(1)
  else:
    print "Compiling....."
    #mira la extension para quitarla y generar el codigo objeto
    if ocode[len(ocode)-2:len(code)]==".c":
	ocode=ocode[:len(ocode)-2]+".o"
	if os.getenv("COMPILEDEBUG")=="TRUE":
		print "==========================Compiling Debug=========================="
		print GCC+CFLAGS+code+" -o "+os.getcwd()+"/"+ocode
    		print "=======================Compiling Debug End========================="
	os.system(GCC+CFLAGS+code+" -o "+os.getcwd()+"/"+ocode)
    if code[len(code)-4:len(code)]==".cpp":
	ocode=ocode[:len(ocode)-4]+".o"
	if os.getenv("COMPILEDEBUG")=="TRUE":
		print "==========================Compiling Debug=========================="
		print GCC+CFLAGS+code+" -o "+os.getcwd()+"/"+ocode
		print "=======================Compiling Debug End========================="
	os.system(GCC+CFLAGS+code+" -o "+os.getcwd()+"/"+ocode)
    #sys.exit(1)
    #si compilo el codigo objeto, osea que se genero el .o
    if os.access(os.getcwd()+"/"+ocode,os.F_OK):
	print "Linking....."
	if os.getenv("COMPILEDEBUG")=="TRUE":
		print "==========================Linking Debug============================"
		print GCC+LFLAGS+os.getcwd()+"/"+ocode+LFLAGS+" -o "+os.getcwd()+"/"+ocode[:len(ocode)-2]
		print "========================Linking Debug End=========================="
    	os.system(GCC+LFLAGS+os.getcwd()+"/"+ocode+LFLAGS+" -o "+os.getcwd()+"/"+ocode[:len(ocode)-2])
    	os.unlink(os.getcwd()+"/"+ocode)
	
    



try:
  #opcion en linea de comando
  CmdOption=sys.argv[1]
except:
  help("basic")

#opcion de linea de comando -c ejecuta el ouput de gcc
if CmdOption=="-e":
  try:
    code=sys.argv[2]
  except:
    help("code")
  #limpia elejecutable anterior en casod e existir
  os.system("rm -rf "+code[:len(code)-2])
  compile(code)
  #mira si la compilacion fue correcta y genero el ejecutable
  if os.access(code[:len(code)-2],os.F_OK):
    os.system("./"+ocode[:len(ocode)-2])

#opcion de solo compilar y enlazar, no ejecuta
if CmdOption!="-e":
	compile(CmdOption)
